generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MANAGER
  USER
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  accounts      Account[]
  sessions      Session[]
  hotels        Hotel[]
  bookings      Booking[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Hotel {
  id          String    @id @default(cuid())
  userEmail   String // Changed from userId to userEmail
  title       String    @db.Text
  description String    @db.Text
  image       String
  addedAt     DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  rooms       Room[]
  bookings    Booking[]
  user        User      @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  rating      Decimal   @db.Decimal(2, 1) @default(1.0)

  @@index([userEmail])
}

model Room {
  id          String    @id @default(uuid())
  title       String
  description String    @db.Text
  image       String
  roomPrice   Int
  hotelId     String
  Hotel       Hotel     @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  Booking     Booking[]

  @@index([hotelId])
}

model Booking {
  id         String   @id @default(uuid())
  userId     String
  startDate  DateTime
  endDate    DateTime
  totalPrice Int
  hotelId    String
  roomId     String
  bookedAt   DateTime @default(now())
  Hotel      Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  Room       Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([hotelId])
  @@index([roomId])
}
